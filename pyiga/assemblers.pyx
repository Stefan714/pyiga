# cython: profile=False
# cython: linetrace=False
# cython: binding=False

#######################
# Autogenerated code. #
# Do not modify.      #
#######################

cimport cython
from libc.math cimport fabs, sqrt, exp, log, sin, cos, tan

import numpy as np
cimport numpy as np

from pyiga.quadrature import make_tensor_quadrature

from pyiga.assemble_tools_cy cimport (
    BaseAssembler2D, BaseAssembler3D,
    BaseVectorAssembler2D, BaseVectorAssembler3D,
    IntInterval, make_intv, intersect_intervals,
    next_lexicographic2, next_lexicographic3,
)
from pyiga.assemble_tools_cy import compute_values_derivs
from pyiga.utils import LazyCachingArray, grid_eval, grid_eval_transformed

cdef class MassAssembler2D(BaseAssembler2D):
    cdef double[:, ::1] W

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=0)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=0)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=0)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=0)

        cdef double[:, :, :, ::1] geo_grad_a
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.W = np.empty(N + ())
        MassAssembler2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                geo_grad_a,
                gw1,
                gw0,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[:, :, :, ::1] _geo_grad_a,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, ::1] _W,
        ) nogil:
        cdef double GaussWeight
        cdef double* geo_grad_a
        cdef double gw1
        cdef double gw0
        cdef double W
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]

                GaussWeight = (gw0 * gw1)
                W = (GaussWeight * fabs(((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))))
                _W[i0, i1] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1,
            double[:, ::1] _W,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef double W
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]

                result += (((VDu0[1*i0+0] * VDu1[1*i1+0]) * (VDv0[1*i0+0] * VDv1[1*i1+0])) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        cdef (double*) values_v[2]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        return MassAssembler2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
                values_v[0], values_v[1],
        )

cdef class StiffnessAssembler2D(BaseAssembler2D):
    cdef double[:, :, :, ::1] B

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=1)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=1)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=1)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=1)

        cdef double[:, :, :, ::1] geo_grad_a
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.B = np.empty(N + (2, 2))
        StiffnessAssembler2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                geo_grad_a,
                gw1,
                gw0,
                self.B,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[:, :, :, ::1] _geo_grad_a,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, :, :, ::1] _B,
        ) nogil:
        cdef double _tmp2
        cdef double _tmp1
        cdef double JacInv[4]
        cdef double GaussWeight
        cdef double W
        cdef double* geo_grad_a
        cdef double gw1
        cdef double gw0
        cdef double* B
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]
                B = &_B[i0, i1, 0, 0]

                _tmp2 = ((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))
                _tmp1 = (1.0 / _tmp2)
                JacInv[0] = (_tmp1 * geo_grad_a[3])
                JacInv[1] = (_tmp1 * -geo_grad_a[1])
                JacInv[2] = (_tmp1 * -geo_grad_a[2])
                JacInv[3] = (_tmp1 * geo_grad_a[0])
                GaussWeight = (gw0 * gw1)
                W = (GaussWeight * fabs(_tmp2))
                B[0] = (W * ((JacInv[0] * JacInv[0]) + (JacInv[1] * JacInv[1])))
                B[1] = (W * ((JacInv[0] * JacInv[2]) + (JacInv[1] * JacInv[3])))
                B[3] = (W * ((JacInv[2] * JacInv[2]) + (JacInv[3] * JacInv[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1,
            double[:, :, :, ::1] _B,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef double _tmp4
        cdef double _tmp3
        cdef double* B
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                B = &_B[i0, i1, 0, 0]

                _tmp4 = (VDu0[2*i0+1] * VDu1[2*i1+0])
                _tmp3 = (VDu0[2*i0+0] * VDu1[2*i1+1])
                result += ((((B[0] * _tmp3) + (B[1] * _tmp4)) * (VDv0[2*i0+0] * VDv1[2*i1+1])) + (((B[1] * _tmp3) + (B[3] * _tmp4)) * (VDv0[2*i0+1] * VDv1[2*i1+0])))
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        cdef (double*) values_v[2]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        return StiffnessAssembler2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.B [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
                values_v[0], values_v[1],
        )

cdef class HeatAssembler_ST2D(BaseAssembler2D):
    cdef double[:, ::1] W
    cdef double[:, :, :, ::1] JacInv

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=1)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=1)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=1)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=1)

        cdef double[::1] gw1
        cdef double[::1] gw0
        cdef double[:, :, :, ::1] geo_grad_a
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (2, 2))
        HeatAssembler_ST2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                gw1,
                gw0,
                geo_grad_a,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[::1] _gw1,
            double[::1] _gw0,
            double[:, :, :, ::1] _geo_grad_a,
            # output
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
        ) nogil:
        cdef double GaussWeight
        cdef double _tmp2
        cdef double _tmp1
        cdef double gw1
        cdef double gw0
        cdef double* geo_grad_a
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                JacInv = &_JacInv[i0, i1, 0, 0]

                GaussWeight = (gw0 * gw1)
                _tmp2 = ((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))
                _tmp1 = (1.0 / _tmp2)
                W = (GaussWeight * fabs(_tmp2))
                _W[i0, i1] = W
                JacInv[0] = (_tmp1 * geo_grad_a[3])
                JacInv[1] = (_tmp1 * -geo_grad_a[1])
                JacInv[2] = (_tmp1 * -geo_grad_a[2])
                JacInv[3] = (_tmp1 * geo_grad_a[0])

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1,
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef double _dv_10
        cdef double _du_01
        cdef double _du_10
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _dv_10 = (VDv0[2*i0+0] * VDv1[2*i1+1])
                _du_01 = (VDu0[2*i0+1] * VDu1[2*i1+0])
                _du_10 = (VDu0[2*i0+0] * VDu1[2*i1+1])
                result += ((((JacInv[0] * _du_10) * (JacInv[0] * _dv_10)) + (_du_01 * (VDv0[2*i0+0] * VDv1[2*i1+0]))) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        cdef (double*) values_v[2]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        return HeatAssembler_ST2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
                values_v[0], values_v[1],
        )

cdef class WaveAssembler_ST2D(BaseAssembler2D):
    cdef double[:, ::1] W
    cdef double[:, :, :, ::1] JacInv

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=2)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=2)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=2)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=2)

        cdef double[::1] gw1
        cdef double[::1] gw0
        cdef double[:, :, :, ::1] geo_grad_a
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (2, 2))
        WaveAssembler_ST2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                gw1,
                gw0,
                geo_grad_a,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[::1] _gw1,
            double[::1] _gw0,
            double[:, :, :, ::1] _geo_grad_a,
            # output
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
        ) nogil:
        cdef double GaussWeight
        cdef double _tmp2
        cdef double _tmp1
        cdef double gw1
        cdef double gw0
        cdef double* geo_grad_a
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                JacInv = &_JacInv[i0, i1, 0, 0]

                GaussWeight = (gw0 * gw1)
                _tmp2 = ((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))
                _tmp1 = (1.0 / _tmp2)
                W = (GaussWeight * fabs(_tmp2))
                _W[i0, i1] = W
                JacInv[0] = (_tmp1 * geo_grad_a[3])
                JacInv[1] = (_tmp1 * -geo_grad_a[1])
                JacInv[2] = (_tmp1 * -geo_grad_a[2])
                JacInv[3] = (_tmp1 * geo_grad_a[0])

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1,
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef double _dv_11
        cdef double _dv_01
        cdef double _du_10
        cdef double _du_02
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _dv_11 = (VDv0[3*i0+1] * VDv1[3*i1+1])
                _dv_01 = (VDv0[3*i0+1] * VDv1[3*i1+0])
                _du_10 = (VDu0[3*i0+0] * VDu1[3*i1+1])
                _du_02 = (VDu0[3*i0+2] * VDu1[3*i1+0])
                result += (((_du_02 * _dv_01) + ((JacInv[0] * _du_10) * (JacInv[0] * _dv_11))) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        cdef (double*) values_v[2]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        return WaveAssembler_ST2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
                values_v[0], values_v[1],
        )

cdef class DivDivAssembler2D(BaseVectorAssembler2D):
    cdef double[:, ::1] W
    cdef double[:, :, :, ::1] JacInv

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        self.numcomp[:] = (2, 2,)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=1)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=1)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=1)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=1)

        cdef double[::1] gw1
        cdef double[::1] gw0
        cdef double[:, :, :, ::1] geo_grad_a
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (2, 2))
        DivDivAssembler2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                gw1,
                gw0,
                geo_grad_a,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[::1] _gw1,
            double[::1] _gw0,
            double[:, :, :, ::1] _geo_grad_a,
            # output
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
        ) nogil:
        cdef double GaussWeight
        cdef double _tmp2
        cdef double _tmp1
        cdef double gw1
        cdef double gw0
        cdef double* geo_grad_a
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                JacInv = &_JacInv[i0, i1, 0, 0]

                GaussWeight = (gw0 * gw1)
                _tmp2 = ((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))
                _tmp1 = (1.0 / _tmp2)
                W = (GaussWeight * fabs(_tmp2))
                _W[i0, i1] = W
                JacInv[0] = (_tmp1 * geo_grad_a[3])
                JacInv[1] = (_tmp1 * -geo_grad_a[1])
                JacInv[2] = (_tmp1 * -geo_grad_a[2])
                JacInv[3] = (_tmp1 * geo_grad_a[0])

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void combine(
            size_t n0, size_t n1,
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
            double result[]
        ) nogil:

        cdef double _dv_01
        cdef double _dv_10
        cdef double _tmp6
        cdef double _tmp4
        cdef double _du_01
        cdef double _du_10
        cdef double _tmp5
        cdef double _tmp3
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _dv_01 = (VDv0[2*i0+1] * VDv1[2*i1+0])
                _dv_10 = (VDv0[2*i0+0] * VDv1[2*i1+1])
                _tmp6 = ((JacInv[1] * _dv_10) + (JacInv[3] * _dv_01))
                _tmp4 = ((JacInv[0] * _dv_10) + (JacInv[2] * _dv_01))
                _du_01 = (VDu0[2*i0+1] * VDu1[2*i1+0])
                _du_10 = (VDu0[2*i0+0] * VDu1[2*i1+1])
                _tmp5 = ((JacInv[1] * _du_10) + (JacInv[3] * _du_01))
                _tmp3 = ((JacInv[0] * _du_10) + (JacInv[2] * _du_01))
                result[0] += ((_tmp3 * _tmp4) * W)
                result[1] += ((_tmp5 * _tmp4) * W)
                result[2] += ((_tmp3 * _tmp6) * W)
                result[3] += ((_tmp5 * _tmp6) * W)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef void entry_impl(self, size_t[2] i, size_t[2] j, double result[]) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        cdef (double*) values_v[2]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return   # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return   # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        DivDivAssembler2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
                values_v[0], values_v[1],
                result
        )

cdef class L2FunctionalAssembler2D(BaseAssembler2D):
    cdef double[:, ::1] W
    cdef double[:, ::1] f_a

    def __init__(self, kvs0, geo, f):
        self.arity = 1
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=0)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=0)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=0)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=0)

        cdef double[:, :, :, ::1] geo_grad_a
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.W = np.empty(N + ())
        self.f_a = np.ascontiguousarray(grid_eval(f, self.gaussgrid))
        L2FunctionalAssembler2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                geo_grad_a,
                gw1,
                gw0,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[:, :, :, ::1] _geo_grad_a,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, ::1] _W,
        ) nogil:
        cdef double GaussWeight
        cdef double* geo_grad_a
        cdef double gw1
        cdef double gw0
        cdef double W
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]

                GaussWeight = (gw0 * gw1)
                W = (GaussWeight * fabs(((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))))
                _W[i0, i1] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1,
            double[:, ::1] _W,
            double[:, ::1] _f_a,
            double* VDu0, double* VDu1,
        ) nogil:
        cdef double result = 0.0

        cdef double W
        cdef double f_a
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                f_a = _f_a[i0, i1]

                result += ((f_a * (VDu0[1*i0+0] * VDu1[1*i1+0])) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        intv = make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1])
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1])
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        return L2FunctionalAssembler2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.f_a [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
        )

    def update(self, f=None):
        if f:
            self.f_a = np.ascontiguousarray(grid_eval(f, self.gaussgrid))

cdef class L2FunctionalAssemblerPhys2D(BaseAssembler2D):
    cdef double[:, ::1] W
    cdef double[:, ::1] f_a

    def __init__(self, kvs0, geo, f):
        self.arity = 1
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 2, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 2, "Assembler requires 2 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=0)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=0)
        assert len(kvs1) == 2, "Assembler requires 2 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=0)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=0)

        cdef double[:, :, :, ::1] geo_grad_a
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.W = np.empty(N + ())
        self.f_a = np.ascontiguousarray(grid_eval_transformed(f, self.gaussgrid, self._geo))
        L2FunctionalAssemblerPhys2D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0],
                geo_grad_a,
                gw1,
                gw0,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1,
            # input
            double[:, :, :, ::1] _geo_grad_a,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, ::1] _W,
        ) nogil:
        cdef double GaussWeight
        cdef double* geo_grad_a
        cdef double gw1
        cdef double gw0
        cdef double W
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                geo_grad_a = &_geo_grad_a[i0, i1, 0, 0]
                gw1 = _gw1[i1]
                gw0 = _gw0[i0]

                GaussWeight = (gw0 * gw1)
                W = (GaussWeight * fabs(((geo_grad_a[0] * geo_grad_a[3]) - (geo_grad_a[1] * geo_grad_a[2]))))
                _W[i0, i1] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1,
            double[:, ::1] _W,
            double[:, ::1] _f_a,
            double* VDu0, double* VDu1,
        ) nogil:
        cdef double result = 0.0

        cdef double W
        cdef double f_a
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                f_a = _f_a[i0, i1]

                result += ((f_a * (VDu0[1*i0+0] * VDu1[1*i1+0])) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_u[2]
        intv = make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1])
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1])
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]

        return L2FunctionalAssemblerPhys2D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.f_a [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_u[0], values_u[1],
        )

    def update(self, f=None):
        if f:
            self.f_a = np.ascontiguousarray(grid_eval_transformed(f, self.gaussgrid, self._geo))
cdef class MassAssembler3D(BaseAssembler3D):
    cdef double[:, :, ::1] W

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=0)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=0)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=0)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=0)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=0)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=0)

        cdef double[:, :, :, :, ::1] geo_grad_a
        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.W = np.empty(N + ())
        MassAssembler3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                geo_grad_a,
                gw2,
                gw1,
                gw0,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[:, :, :, :, ::1] _geo_grad_a,
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, :, ::1] _W,
        ) nogil:
        cdef double GaussWeight
        cdef double* geo_grad_a
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double W
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]

                    GaussWeight = ((gw0 * gw1) * gw2)
                    W = (GaussWeight * fabs((((geo_grad_a[0] * ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))) - (geo_grad_a[1] * ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6])))) + (geo_grad_a[2] * ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))))))
                    _W[i0, i1, i2] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, ::1] _W,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef double W
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]

                    result += (((VDu0[1*i0+0] * VDu1[1*i1+0] * VDu2[1*i2+0]) * (VDv0[1*i0+0] * VDv1[1*i1+0] * VDv2[1*i2+0])) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        cdef (double*) values_v[3]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp2[j[2],0], self.S0_meshsupp2[j[2],1]),
                make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ j[2], g_sta[2], 0 ]
        values_v[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        return MassAssembler3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
                values_v[0], values_v[1], values_v[2],
        )

cdef class StiffnessAssembler3D(BaseAssembler3D):
    cdef double[:, :, :, :, ::1] B

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=1)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=1)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=1)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=1)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=1)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=1)

        cdef double[:, :, :, :, ::1] geo_grad_a
        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.B = np.empty(N + (3, 3))
        StiffnessAssembler3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                geo_grad_a,
                gw2,
                gw1,
                gw0,
                self.B,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[:, :, :, :, ::1] _geo_grad_a,
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, :, :, :, ::1] _B,
        ) nogil:
        cdef double _tmp5
        cdef double _tmp4
        cdef double _tmp3
        cdef double _tmp2
        cdef double _tmp1
        cdef double JacInv[9]
        cdef double GaussWeight
        cdef double W
        cdef double* geo_grad_a
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double* B
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]
                    B = &_B[i0, i1, i2, 0, 0]

                    _tmp5 = ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))
                    _tmp4 = ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6]))
                    _tmp3 = ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))
                    _tmp2 = (((geo_grad_a[0] * _tmp3) - (geo_grad_a[1] * _tmp4)) + (geo_grad_a[2] * _tmp5))
                    _tmp1 = (1.0 / _tmp2)
                    JacInv[0] = (_tmp1 * _tmp3)
                    JacInv[1] = (_tmp1 * -((geo_grad_a[1] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[7])))
                    JacInv[2] = (_tmp1 * ((geo_grad_a[1] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[4])))
                    JacInv[3] = (_tmp1 * -_tmp4)
                    JacInv[4] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[6])))
                    JacInv[5] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[3])))
                    JacInv[6] = (_tmp1 * _tmp5)
                    JacInv[7] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[7]) - (geo_grad_a[1] * geo_grad_a[6])))
                    JacInv[8] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[4]) - (geo_grad_a[1] * geo_grad_a[3])))
                    GaussWeight = ((gw0 * gw1) * gw2)
                    W = (GaussWeight * fabs(_tmp2))
                    B[0] = (W * (((JacInv[0] * JacInv[0]) + (JacInv[1] * JacInv[1])) + (JacInv[2] * JacInv[2])))
                    B[1] = (W * (((JacInv[0] * JacInv[3]) + (JacInv[1] * JacInv[4])) + (JacInv[2] * JacInv[5])))
                    B[2] = (W * (((JacInv[0] * JacInv[6]) + (JacInv[1] * JacInv[7])) + (JacInv[2] * JacInv[8])))
                    B[4] = (W * (((JacInv[3] * JacInv[3]) + (JacInv[4] * JacInv[4])) + (JacInv[5] * JacInv[5])))
                    B[5] = (W * (((JacInv[3] * JacInv[6]) + (JacInv[4] * JacInv[7])) + (JacInv[5] * JacInv[8])))
                    B[8] = (W * (((JacInv[6] * JacInv[6]) + (JacInv[7] * JacInv[7])) + (JacInv[8] * JacInv[8])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, :, :, ::1] _B,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef double _tmp8
        cdef double _tmp7
        cdef double _tmp6
        cdef double* B
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    B = &_B[i0, i1, i2, 0, 0]

                    _tmp8 = (VDu0[2*i0+1] * VDu1[2*i1+0] * VDu2[2*i2+0])
                    _tmp7 = (VDu0[2*i0+0] * VDu1[2*i1+1] * VDu2[2*i2+0])
                    _tmp6 = (VDu0[2*i0+0] * VDu1[2*i1+0] * VDu2[2*i2+1])
                    result += ((((((B[0] * _tmp6) + (B[1] * _tmp7)) + (B[2] * _tmp8)) * (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+1])) + ((((B[1] * _tmp6) + (B[4] * _tmp7)) + (B[5] * _tmp8)) * (VDv0[2*i0+0] * VDv1[2*i1+1] * VDv2[2*i2+0]))) + ((((B[2] * _tmp6) + (B[5] * _tmp7)) + (B[8] * _tmp8)) * (VDv0[2*i0+1] * VDv1[2*i1+0] * VDv2[2*i2+0])))
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        cdef (double*) values_v[3]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp2[j[2],0], self.S0_meshsupp2[j[2],1]),
                make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ j[2], g_sta[2], 0 ]
        values_v[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        return StiffnessAssembler3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.B [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
                values_v[0], values_v[1], values_v[2],
        )

cdef class HeatAssembler_ST3D(BaseAssembler3D):
    cdef double[:, :, ::1] W
    cdef double[:, :, :, :, ::1] JacInv

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=1)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=1)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=1)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=1)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=1)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=1)

        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        cdef double[:, :, :, :, ::1] geo_grad_a
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (3, 3))
        HeatAssembler_ST3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                gw2,
                gw1,
                gw0,
                geo_grad_a,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            double[:, :, :, :, ::1] _geo_grad_a,
            # output
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
        ) nogil:
        cdef double GaussWeight
        cdef double _tmp5
        cdef double _tmp4
        cdef double _tmp3
        cdef double _tmp2
        cdef double _tmp1
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double* geo_grad_a
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    GaussWeight = ((gw0 * gw1) * gw2)
                    _tmp5 = ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))
                    _tmp4 = ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6]))
                    _tmp3 = ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))
                    _tmp2 = (((geo_grad_a[0] * _tmp3) - (geo_grad_a[1] * _tmp4)) + (geo_grad_a[2] * _tmp5))
                    _tmp1 = (1.0 / _tmp2)
                    W = (GaussWeight * fabs(_tmp2))
                    _W[i0, i1, i2] = W
                    JacInv[0] = (_tmp1 * _tmp3)
                    JacInv[1] = (_tmp1 * -((geo_grad_a[1] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[7])))
                    JacInv[2] = (_tmp1 * ((geo_grad_a[1] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[4])))
                    JacInv[3] = (_tmp1 * -_tmp4)
                    JacInv[4] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[6])))
                    JacInv[5] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[3])))
                    JacInv[6] = (_tmp1 * _tmp5)
                    JacInv[7] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[7]) - (geo_grad_a[1] * geo_grad_a[6])))
                    JacInv[8] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[4]) - (geo_grad_a[1] * geo_grad_a[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef double _dv_010
        cdef double _dv_100
        cdef double _du_001
        cdef double _du_010
        cdef double _du_100
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _dv_010 = (VDv0[2*i0+0] * VDv1[2*i1+1] * VDv2[2*i2+0])
                    _dv_100 = (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+1])
                    _du_001 = (VDu0[2*i0+1] * VDu1[2*i1+0] * VDu2[2*i2+0])
                    _du_010 = (VDu0[2*i0+0] * VDu1[2*i1+1] * VDu2[2*i2+0])
                    _du_100 = (VDu0[2*i0+0] * VDu1[2*i1+0] * VDu2[2*i2+1])
                    result += ((((((JacInv[0] * _du_100) + (JacInv[3] * _du_010)) * ((JacInv[0] * _dv_100) + (JacInv[3] * _dv_010))) + (((JacInv[1] * _du_100) + (JacInv[4] * _du_010)) * ((JacInv[1] * _dv_100) + (JacInv[4] * _dv_010)))) + (_du_001 * (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+0]))) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        cdef (double*) values_v[3]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp2[j[2],0], self.S0_meshsupp2[j[2],1]),
                make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ j[2], g_sta[2], 0 ]
        values_v[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        return HeatAssembler_ST3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
                values_v[0], values_v[1], values_v[2],
        )

cdef class WaveAssembler_ST3D(BaseAssembler3D):
    cdef double[:, :, ::1] W
    cdef double[:, :, :, :, ::1] JacInv

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=2)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=2)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=2)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=2)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=2)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=2)

        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        cdef double[:, :, :, :, ::1] geo_grad_a
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (3, 3))
        WaveAssembler_ST3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                gw2,
                gw1,
                gw0,
                geo_grad_a,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            double[:, :, :, :, ::1] _geo_grad_a,
            # output
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
        ) nogil:
        cdef double GaussWeight
        cdef double _tmp5
        cdef double _tmp4
        cdef double _tmp3
        cdef double _tmp2
        cdef double _tmp1
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double* geo_grad_a
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    GaussWeight = ((gw0 * gw1) * gw2)
                    _tmp5 = ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))
                    _tmp4 = ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6]))
                    _tmp3 = ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))
                    _tmp2 = (((geo_grad_a[0] * _tmp3) - (geo_grad_a[1] * _tmp4)) + (geo_grad_a[2] * _tmp5))
                    _tmp1 = (1.0 / _tmp2)
                    W = (GaussWeight * fabs(_tmp2))
                    _W[i0, i1, i2] = W
                    JacInv[0] = (_tmp1 * _tmp3)
                    JacInv[1] = (_tmp1 * -((geo_grad_a[1] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[7])))
                    JacInv[2] = (_tmp1 * ((geo_grad_a[1] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[4])))
                    JacInv[3] = (_tmp1 * -_tmp4)
                    JacInv[4] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[6])))
                    JacInv[5] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[3])))
                    JacInv[6] = (_tmp1 * _tmp5)
                    JacInv[7] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[7]) - (geo_grad_a[1] * geo_grad_a[6])))
                    JacInv[8] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[4]) - (geo_grad_a[1] * geo_grad_a[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef double _dv_011
        cdef double _dv_101
        cdef double _dv_001
        cdef double _du_010
        cdef double _du_100
        cdef double _du_002
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _dv_011 = (VDv0[3*i0+1] * VDv1[3*i1+1] * VDv2[3*i2+0])
                    _dv_101 = (VDv0[3*i0+1] * VDv1[3*i1+0] * VDv2[3*i2+1])
                    _dv_001 = (VDv0[3*i0+1] * VDv1[3*i1+0] * VDv2[3*i2+0])
                    _du_010 = (VDu0[3*i0+0] * VDu1[3*i1+1] * VDu2[3*i2+0])
                    _du_100 = (VDu0[3*i0+0] * VDu1[3*i1+0] * VDu2[3*i2+1])
                    _du_002 = (VDu0[3*i0+2] * VDu1[3*i1+0] * VDu2[3*i2+0])
                    result += (((_du_002 * _dv_001) + ((((JacInv[0] * _du_100) + (JacInv[3] * _du_010)) * ((JacInv[0] * _dv_101) + (JacInv[3] * _dv_011))) + (((JacInv[1] * _du_100) + (JacInv[4] * _du_010)) * ((JacInv[1] * _dv_101) + (JacInv[4] * _dv_011))))) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        cdef (double*) values_v[3]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp2[j[2],0], self.S0_meshsupp2[j[2],1]),
                make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1]),
        )
        if intv.a >= intv.b: return 0.0  # no intersection of support
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ j[2], g_sta[2], 0 ]
        values_v[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        return WaveAssembler_ST3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
                values_v[0], values_v[1], values_v[2],
        )

cdef class DivDivAssembler3D(BaseVectorAssembler3D):
    cdef double[:, :, ::1] W
    cdef double[:, :, :, :, ::1] JacInv

    def __init__(self, kvs0, geo):
        self.arity = 2
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        self.numcomp[:] = (3, 3,)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=1)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=1)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=1)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=1)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=1)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=1)

        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        cdef double[:, :, :, :, ::1] geo_grad_a
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (3, 3))
        DivDivAssembler3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                gw2,
                gw1,
                gw0,
                geo_grad_a,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            double[:, :, :, :, ::1] _geo_grad_a,
            # output
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
        ) nogil:
        cdef double GaussWeight
        cdef double _tmp11
        cdef double _tmp10
        cdef double _tmp9
        cdef double _tmp2
        cdef double _tmp1
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double* geo_grad_a
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    GaussWeight = ((gw0 * gw1) * gw2)
                    _tmp11 = ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))
                    _tmp10 = ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6]))
                    _tmp9 = ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))
                    _tmp2 = (((geo_grad_a[0] * _tmp9) - (geo_grad_a[1] * _tmp10)) + (geo_grad_a[2] * _tmp11))
                    _tmp1 = (1.0 / _tmp2)
                    W = (GaussWeight * fabs(_tmp2))
                    _W[i0, i1, i2] = W
                    JacInv[0] = (_tmp1 * _tmp9)
                    JacInv[1] = (_tmp1 * -((geo_grad_a[1] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[7])))
                    JacInv[2] = (_tmp1 * ((geo_grad_a[1] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[4])))
                    JacInv[3] = (_tmp1 * -_tmp10)
                    JacInv[4] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[8]) - (geo_grad_a[2] * geo_grad_a[6])))
                    JacInv[5] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[5]) - (geo_grad_a[2] * geo_grad_a[3])))
                    JacInv[6] = (_tmp1 * _tmp11)
                    JacInv[7] = (_tmp1 * -((geo_grad_a[0] * geo_grad_a[7]) - (geo_grad_a[1] * geo_grad_a[6])))
                    JacInv[8] = (_tmp1 * ((geo_grad_a[0] * geo_grad_a[4]) - (geo_grad_a[1] * geo_grad_a[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
            double result[]
        ) nogil:

        cdef double _dv_001
        cdef double _dv_010
        cdef double _dv_100
        cdef double _tmp8
        cdef double _tmp7
        cdef double _tmp4
        cdef double _du_001
        cdef double _du_010
        cdef double _du_100
        cdef double _tmp6
        cdef double _tmp5
        cdef double _tmp3
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _dv_001 = (VDv0[2*i0+1] * VDv1[2*i1+0] * VDv2[2*i2+0])
                    _dv_010 = (VDv0[2*i0+0] * VDv1[2*i1+1] * VDv2[2*i2+0])
                    _dv_100 = (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+1])
                    _tmp8 = (((JacInv[2] * _dv_100) + (JacInv[5] * _dv_010)) + (JacInv[8] * _dv_001))
                    _tmp7 = (((JacInv[1] * _dv_100) + (JacInv[4] * _dv_010)) + (JacInv[7] * _dv_001))
                    _tmp4 = (((JacInv[0] * _dv_100) + (JacInv[3] * _dv_010)) + (JacInv[6] * _dv_001))
                    _du_001 = (VDu0[2*i0+1] * VDu1[2*i1+0] * VDu2[2*i2+0])
                    _du_010 = (VDu0[2*i0+0] * VDu1[2*i1+1] * VDu2[2*i2+0])
                    _du_100 = (VDu0[2*i0+0] * VDu1[2*i1+0] * VDu2[2*i2+1])
                    _tmp6 = (((JacInv[2] * _du_100) + (JacInv[5] * _du_010)) + (JacInv[8] * _du_001))
                    _tmp5 = (((JacInv[1] * _du_100) + (JacInv[4] * _du_010)) + (JacInv[7] * _du_001))
                    _tmp3 = (((JacInv[0] * _du_100) + (JacInv[3] * _du_010)) + (JacInv[6] * _du_001))
                    result[0] += ((_tmp3 * _tmp4) * W)
                    result[1] += ((_tmp5 * _tmp4) * W)
                    result[2] += ((_tmp6 * _tmp4) * W)
                    result[3] += ((_tmp3 * _tmp7) * W)
                    result[4] += ((_tmp5 * _tmp7) * W)
                    result[5] += ((_tmp6 * _tmp7) * W)
                    result[6] += ((_tmp3 * _tmp8) * W)
                    result[7] += ((_tmp5 * _tmp8) * W)
                    result[8] += ((_tmp6 * _tmp8) * W)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef void entry_impl(self, size_t[3] i, size_t[3] j, double result[]) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        cdef (double*) values_v[3]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp0[j[0],0], self.S0_meshsupp0[j[0],1]),
                make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1]),
        )
        if intv.a >= intv.b: return   # no intersection of support
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ j[0], g_sta[0], 0 ]
        values_v[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp1[j[1],0], self.S0_meshsupp1[j[1],1]),
                make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1]),
        )
        if intv.a >= intv.b: return   # no intersection of support
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ j[1], g_sta[1], 0 ]
        values_v[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = intersect_intervals(
                make_intv(self.S0_meshsupp2[j[2],0], self.S0_meshsupp2[j[2],1]),
                make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1]),
        )
        if intv.a >= intv.b: return   # no intersection of support
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ j[2], g_sta[2], 0 ]
        values_v[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        DivDivAssembler3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
                values_v[0], values_v[1], values_v[2],
                result
        )

cdef class L2FunctionalAssembler3D(BaseAssembler3D):
    cdef double[:, :, ::1] W
    cdef double[:, :, ::1] f_a

    def __init__(self, kvs0, geo, f):
        self.arity = 1
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=0)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=0)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=0)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=0)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=0)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=0)

        cdef double[:, :, :, :, ::1] geo_grad_a
        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.W = np.empty(N + ())
        self.f_a = np.ascontiguousarray(grid_eval(f, self.gaussgrid))
        L2FunctionalAssembler3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                geo_grad_a,
                gw2,
                gw1,
                gw0,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[:, :, :, :, ::1] _geo_grad_a,
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, :, ::1] _W,
        ) nogil:
        cdef double GaussWeight
        cdef double* geo_grad_a
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double W
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]

                    GaussWeight = ((gw0 * gw1) * gw2)
                    W = (GaussWeight * fabs((((geo_grad_a[0] * ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))) - (geo_grad_a[1] * ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6])))) + (geo_grad_a[2] * ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))))))
                    _W[i0, i1, i2] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, ::1] _W,
            double[:, :, ::1] _f_a,
            double* VDu0, double* VDu1, double* VDu2,
        ) nogil:
        cdef double result = 0.0

        cdef double W
        cdef double f_a
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    f_a = _f_a[i0, i1, i2]

                    result += ((f_a * (VDu0[1*i0+0] * VDu1[1*i1+0] * VDu2[1*i2+0])) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        intv = make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1])
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1])
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1])
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        return L2FunctionalAssembler3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.f_a [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
        )

    def update(self, f=None):
        if f:
            self.f_a = np.ascontiguousarray(grid_eval(f, self.gaussgrid))

cdef class L2FunctionalAssemblerPhys3D(BaseAssembler3D):
    cdef double[:, :, ::1] W
    cdef double[:, :, ::1] f_a

    def __init__(self, kvs0, geo, f):
        self.arity = 1
        self.nqp = max([kv.p for kv in kvs0]) + 1
        kvs1 = kvs0
        self.kvs = (kvs0, kvs1)
        assert geo.dim == 3, "Geometry has wrong dimension"
        self._geo = geo

        # NB: we assume all kvs result in the same mesh
        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs0], self.nqp)
        self.gaussgrid = gaussgrid
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        assert len(kvs0) == 3, "Assembler requires 3 knot vectors"
        self.S0_ndofs[:] = [kv.numdofs for kv in kvs0]
        self.S0_meshsupp0 = kvs0[0].mesh_support_idx_all()
        self.S0_C0 = compute_values_derivs(kvs0[0], gaussgrid[0], derivs=0)
        self.S0_meshsupp1 = kvs0[1].mesh_support_idx_all()
        self.S0_C1 = compute_values_derivs(kvs0[1], gaussgrid[1], derivs=0)
        self.S0_meshsupp2 = kvs0[2].mesh_support_idx_all()
        self.S0_C2 = compute_values_derivs(kvs0[2], gaussgrid[2], derivs=0)
        assert len(kvs1) == 3, "Assembler requires 3 knot vectors"
        self.S1_ndofs[:] = [kv.numdofs for kv in kvs1]
        self.S1_meshsupp0 = kvs1[0].mesh_support_idx_all()
        self.S1_C0 = compute_values_derivs(kvs1[0], gaussgrid[0], derivs=0)
        self.S1_meshsupp1 = kvs1[1].mesh_support_idx_all()
        self.S1_C1 = compute_values_derivs(kvs1[1], gaussgrid[1], derivs=0)
        self.S1_meshsupp2 = kvs1[2].mesh_support_idx_all()
        self.S1_C2 = compute_values_derivs(kvs1[2], gaussgrid[2], derivs=0)

        cdef double[:, :, :, :, ::1] geo_grad_a
        cdef double[::1] gw2
        cdef double[::1] gw1
        cdef double[::1] gw0
        geo_grad_a = np.ascontiguousarray(geo.grid_jacobian(self.gaussgrid))
        gw2 = gaussweights[2]
        gw1 = gaussweights[1]
        gw0 = gaussweights[0]
        self.W = np.empty(N + ())
        self.f_a = np.ascontiguousarray(grid_eval_transformed(f, self.gaussgrid, self._geo))
        L2FunctionalAssemblerPhys3D.precompute_fields(
                gaussgrid[0].shape[0], gaussgrid[1].shape[0], gaussgrid[2].shape[0],
                geo_grad_a,
                gw2,
                gw1,
                gw0,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # dimensions
            size_t n0, size_t n1, size_t n2,
            # input
            double[:, :, :, :, ::1] _geo_grad_a,
            double[::1] _gw2,
            double[::1] _gw1,
            double[::1] _gw0,
            # output
            double[:, :, ::1] _W,
        ) nogil:
        cdef double GaussWeight
        cdef double* geo_grad_a
        cdef double gw2
        cdef double gw1
        cdef double gw0
        cdef double W
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    geo_grad_a = &_geo_grad_a[i0, i1, i2, 0, 0]
                    gw2 = _gw2[i2]
                    gw1 = _gw1[i1]
                    gw0 = _gw0[i0]

                    GaussWeight = ((gw0 * gw1) * gw2)
                    W = (GaussWeight * fabs((((geo_grad_a[0] * ((geo_grad_a[4] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[7]))) - (geo_grad_a[1] * ((geo_grad_a[3] * geo_grad_a[8]) - (geo_grad_a[5] * geo_grad_a[6])))) + (geo_grad_a[2] * ((geo_grad_a[3] * geo_grad_a[7]) - (geo_grad_a[4] * geo_grad_a[6]))))))
                    _W[i0, i1, i2] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            size_t n0, size_t n1, size_t n2,
            double[:, :, ::1] _W,
            double[:, :, ::1] _f_a,
            double* VDu0, double* VDu1, double* VDu2,
        ) nogil:
        cdef double result = 0.0

        cdef double W
        cdef double f_a
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    f_a = _f_a[i0, i1, i2]

                    result += ((f_a * (VDu0[1*i0+0] * VDu1[1*i1+0] * VDu2[1*i2+0])) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double entry_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_u[3]
        intv = make_intv(self.S0_meshsupp0[i[0],0], self.S0_meshsupp0[i[0],1])
        g_sta[0] = self.nqp * intv.a    # start of Gauss nodes
        g_end[0] = self.nqp * intv.b    # end of Gauss nodes
        values_u[0] = &self.S0_C0[ i[0], g_sta[0], 0 ]
        intv = make_intv(self.S0_meshsupp1[i[1],0], self.S0_meshsupp1[i[1],1])
        g_sta[1] = self.nqp * intv.a    # start of Gauss nodes
        g_end[1] = self.nqp * intv.b    # end of Gauss nodes
        values_u[1] = &self.S0_C1[ i[1], g_sta[1], 0 ]
        intv = make_intv(self.S0_meshsupp2[i[2],0], self.S0_meshsupp2[i[2],1])
        g_sta[2] = self.nqp * intv.a    # start of Gauss nodes
        g_end[2] = self.nqp * intv.b    # end of Gauss nodes
        values_u[2] = &self.S0_C2[ i[2], g_sta[2], 0 ]

        return L2FunctionalAssemblerPhys3D.combine(
                g_end[0]-g_sta[0], g_end[1]-g_sta[1], g_end[2]-g_sta[2],
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.f_a [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_u[0], values_u[1], values_u[2],
        )

    def update(self, f=None):
        if f:
            self.f_a = np.ascontiguousarray(grid_eval_transformed(f, self.gaussgrid, self._geo))
